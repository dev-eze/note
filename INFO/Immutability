Immutability(변경불가성)
객체가 생성된 이후 그 상태를 변경할 수 없는 디자인 패턴을 의미한다.
변경이 불가능하다는 의미는 메모리 영역에서의 변경이 불가능하다는 의미이며, 재할당은 가능하다.
객체는 참조(reference) 형태로 전달 및 전달 받는다. 
객체가 참조를 통해 공유되어 있다면 그 상태가 언제든지 변경될 수 있다는 뜻이기 때문에 문제가 될 가능성도 커지게 된다. 
이는 객체의 참조를 가지고 있는 어떤 장소에서, 객체를 변경하면 참조를 공유하는 모든 장소에서 그 영향을 받기 때문이다,

의도하지 않은 객체의 변경이 발생하는 원인중 대부분은 레퍼런스를 참조한 다른 객체에서 객체를 변경하기 하기 때문이다.
해결 방법으론, 객체를 불변객체로 만들어 프로퍼티의 변경을 막고 변경이 필요한 경우에는 참조가 아닌, 객체의 복사 (defensive copy)를 통해 
새로운 객체를 생성한 후 변경한다. 또는 Observer 패턴을 사용할 수도 있다.
하지만 객체 자체가 변경가능한 데이터를 많이 가지고 있다면, 비효울적이다.
 
String a = "Hello";
a = "World";

첫번째 구문이 실행되면 메모리에 문자열 ‘Hello’가 생성되고 식별자 a는 메모리에 생성된 문자열 ‘Hello’의 메모리 주소를 가리킨다. 
그리고 두번째 구문이 실행되면 이전에 생성된 문자열 ‘Hello’을 수정하는 것이 아니라 새로운 문자열 ‘world’를 메모리에 생성하고 a는 이것을 가리킨다. 
이때 문자열 ‘Hello’와 ‘world’는 모두 메모리에 존재하고 있다. 
문자열 ‘Hello’를 가리키고 있다가 문자열 ‘world’를 가리키도록 변경되었다.



