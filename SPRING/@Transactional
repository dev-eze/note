@Transactional

데이터베이스 트랜잭션(Database Transaction)은 데이터베이스에서 상호작용의 단위라고 할 수 있다. 
연관된 두 개 이상의 쿼리를 실행할 때, 모든 작업이 성공적으로 끝났을 때 COMMIT을 수행하고 중간에 오류가 발생하면 ROLLBACK하는 것이 기본이다.

스프링에서는 이런 트랜잭션을 지원하고 있다.
스프링은 코드 기반의 트랜잭션 처리(Programmatic Transaction) 뿐만 아니라 선언적 트랜잭션(Declarative Transaction)을 지원하고 있다. 
스프링이 제공하는 트랜잭션 템플릿 클래스를 이용하거나 설정 파일, 어노테이션을 이용해서 트랜잭션의 범위 및 규칙을 정의할 수 있다.

아래와 같이 설정을 해주면 트랜잭션을 설정하고자 하는 곳에서  @Transactional 어노테이션을 사용해서 적용이 가능하다.

#설정방법_xml
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
     <property name="dataSource" ref="dataSource"/>
</bean>
<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

#설정방법_javaConfig
@EnableTransactionManagement
public class AppConfig {
    ...

    @Bean
    public PlatformTransactionManager transactionManager() throws URISyntaxException, GeneralSecurityException, ParseException, IOException {
        return new DataSourceTransactionManager(dataSource());
    }
}

우선 해당 어노테이션을 적용하면 적용된 클래스 또는 메소드에 (인터페이스 수준까지도) 트랜잭션이 적용된다. 
따라서 로직 흐름에 맞추어 전체적으로 트랜잭션을 적용할것인지, 아니면 특정 메소드에 적용할것인지 전략을 잘 세워야 한다.
인터페이스를 구현한 클래스로 선언된 빈은 인터페이스 메소드에 한해서 트랜잭션이 적용된다.
인터페이스에 붙은 @Transactional 선언은 인터페이스 내의 모든 메소드에 적용이 되고,
동시에 메소드 레벨에도 @Transactional을 지정할 수 있다. 

메소드 선언 > 인터페이스 선언

클래스의 @Transactional > 인터페이스의 @Transactional


JAVA 소스코드에서 직접 설정하는 경우, 적절한 @bean을 생성한 뒤 @EnableTransactionManagement를 이용하면 된다.
이렇게 설정하고나면, 원하는 메소드의 윗부분에 @Transactional을 붙여 간편하게 트랜잭션을 구현할 수 있다. 메소드 전체를 하나의 트랜잭션으로 묶을 수 있다는 것은, @Transactional의 내부 동작이 프록시(Proxy)로 이루어진다는 것을 뜻한다. 


@Transactional
public void something (int a) {
    ...
}


@Transactional이 적용되어 있을 경우, 이 클래스에 트랜잭션 기능이 적용된 프록시 객체가 생성된다. 이 프록시 객체는 @Transactional이 포함된 메소드가 호출 될 경우, PlatformTransactionManager를 사용하여 트랜잭션을 시작하고, 정상 여부에 따라 Commit 또는 Rollback 한다.
정상 여부는 보통 RuntimeException이 발생했는지 기준으로 결정되며, 
RuntimeException 외 다른 Exception(SQLException 등)에도 트랜잭션 롤백처리를 적용하고 싶으면 @Transactional의 rollbackFor 속성을 활용하면 된다.

#속성(옵션)

isolation
격리수준이라는 옵션이다. 트랜잭션에서 일관성이 없는 데이터를 허용하도록 하는 수준을 말하는데 옵션은 다음과 같다.

READ_UNCOMMITTED (level 0)

트랜잭션에 처리중인 혹은 아직 커밋되지 않은 데이터를 다른 트랜잭션이 읽는 것을 허용
어떤 사용자가 A라는 데이터를 B라는 데이터로 변경하는 동안 다른 사용자는 B라는 아직 완료되지 않은(Uncommitted 혹은 Dirty) 데이터 B를 읽을 수 있다.
Dirty read
위와 같이 다른 트랜잭션에서 처리하는 작업이 완료되지 않았는데도 다른 트랜잭션에서 볼 수 있는 현상을 dirty read 라고 하며, READ UNCOMMITTED 격리수준에서만 일어나는 현상

READ_COMMITTED (level 1)

dirty read 방지 : 트랜잭션이 커밋되어 확정된 데이터만을 읽는 것을 허용
어떠한 사용자가 A라는 데이터를 B라는 데이터로 변경하는 동안 다른 사용자는 해당 데이터에 접근할 수 없다.
REPEATABLE_READ (level 2)

트랜잭션이 완료될 때까지 SELECT 문장이 사용하는 모든 데이터에 shared lock이 걸리므로 다른 사용자는 그 영역에 해당되는 데이터에 대한 수정이 불가능하다.
선행 트랜잭션이 읽은 데이터는 트랜잭션이 종료될 때까지 후행 트랜잭션이 갱신하거나 삭제하는 것을 불허함으로써 같은 데이터를 두 번 쿼리했을 때 일관성 있는 결과를 리턴함
SERIALIZABLE (level 3)

완벽한 읽기 일관성 모드를 제공
데이터의 일관성 및 동시성을 위해 MVCC(Multi Version Concurrency Control)을 사용하지 않음(MVCC는 다중 사용자 데이터베이스 성능을 위한 기술로 데이터 조회 시 LOCK을 사용하지 않고 데이터의 버전을 관리해 데이터의 일관성 및 동시성을 높이는 기술)
트랜잭션이 완료될 때까지 SELECT 문장이 사용하는 모든 데이터에 shared lock이 걸리므로 다른 사용자는 그 영역에 해당되는 데이터에 대한 수정 및 입력이 불가능하다.
propagation ( 전파옵션)
REQUIRED : 부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 새로운 트랜잭션을 생성
REQUIRES_NEW : 부모 트랜잭션을 무시하고 무조건 새로운 트랜잭션이 생성
SUPPORT : 부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 nontransactionally로 실행
MANDATORY : 부모 트랜잭션 내에서 실행되며 부모 트랜잭션이 없을 경우 예외가 발생
NOT_SUPPORT : nontransactionally로 실행하며 부모 트랜잭션 내에서 실행될 경우 일시 정지
NEVER : nontransactionally로 실행되며 부모 트랜잭션이 존재한다면 예외가 발생
NESTED : 해당 메서드가 부모 트랜잭션에서 진행될 경우 별개로 커밋되거나 롤백될 수 있음. 둘러싼 트랜잭션이 없을 경우 REQUIRED와 동일하게 작동
no-rollback-for - 예외처리 (기본값 : 없음)
특정 예외가 발생하더라도 롤백되지 않도록 설정

# 주요속성
isolation	Transaction의 isolation Level. 별도로 정의하지 않으면 DB의 Isolation Level을 따름.	@Transactional(isolation=Isolation.DEFAULT)
propagation	트랜잭션 전파규칙을 정의 , Default=REQURIED	@Transactional(propagation=Propagation.REQUIRED)
readOnly	해당 Transaction을 읽기 전용 모드로 처리 (Default = false)	@Transactional(readOnly = true)
rollbackFor	정의된 Exception에 대해서는 rollback을 수행	@Transactional(rollbackFor=Exception.class)
noRollbackFor	정의된 Exception에 대해서는 rollback을 수행하지 않음.	@Transactional(noRollbackFor=Exception.class)
timeout	지정한 시간 내에 해당 메소드 수행이 완료되지 않은 경우 rollback 수행. -1일 경우 no timeout (Default = -1)	@Transactional(timeout=10)

기본값정도는 숙지하고 사용해야 한다 ^^

전파옵션을 좀더 설명하자면,
트랜잭션을 처리하다 보면 자주 발생하게 되는 상황이 있다. 바로 트랜잭션 동작 도중 다른 트랜잭션을 호출/실행하는 상황이다. 
피호출 트랜잭션의 입장에서는 호출한 쪽의 트랜잭션을 그대로 사용할 수도 있고, 새롭게 트랜잭션을 생성할 수도 있다.
전자의 경우 중간에 오류가 발생하면 모든 트랜잭션이 롤백될 것이고, 후자의 경우 오류가 발생한 트랜잭션이 롤백 될 것이다. 

앞서 정리한 propagation 속성이 이럴때 필요하게 된다.

REQUIRED: 현재 진행중인 트랜잭션이 있으면 그것을 사용하고, 없으면 생성 [DEFAULT 값]
MANDATORY: 현재 진행중인 트랜잭션이 없으면 Exception 발생. 없으면 생성
REQUIRES_NEW: 항상 새로운 트랜잭션을 만든다. (트랜잭션을 분리)
SUPPORTS: 현재 진행중인 트랜잭션이 있으면 그것을 사용, 없으면 그냥 진행
NOT_SUPPORTED: 현재 진행중인 트랜잭션이 있으면 그것을 미사용, 없으면 그냥 진헹
NEVER: 현재 진행중인 트랜잭션이 있으면 Exception. 없으면 그냥 진행

예)@Transactional(propagation = Propagation.REQUIRED, rollbackFor = RuntimeException.class)
catch절에서 throw new RuntimeException 발생시킴. 

