자바에서 문자열을 생성할 때 String을 사용한다,
String은 소위 불면객체(immutable obejct)라고 한다.
2개의 String객체가 있을 때, 각각을 더하는 연산을 하게 되면 1,2 말고도 새로운 3의 String을 생선한다.
즉, String객체와 String객체를 더하는 (+) 행위는 메모리 할당과 메모리 해제를 발생시켜 더하는 연산이 많으면 성능적으로 좋지 않다.

그러나 StringBuilder는 이름도 더 전문적이지 않나 ^^
기대를 저버리지 않고 String과 String을 더할 때 새로운 객체를 생성하는 것이 아닌, 기존의 데이터에 더하는 append 방식을 사용하기에 상대적으로 속도도 빠르며 
부하도 적다.

#결론은 StringBuilder를 습관적으로 사용하는 것이 좋다
원래는 + 을 해도 새로운 공간을 만들어 넣지만, 
complier의 최적화 작업을 통해 일부 String 의 + 연산을 StringBuilder 로 치환해서 처리할수도 안할수도 있다.
항상 그렇게 되지 않고 보통 치환이 잘 되는 경우는 한 문장 안에서 계속 + 로 연결할 경우이다.
따라서 습관적으로 StringBuilder 의 append() 로 체이닝 되도록 사용하자!

#동작방식차이
+ 연산자와 concat, StringBuilder 동작방식은 다르다.
concat은 합친 문자열을 new String으로 생성하고
+ 연산자도 원래는 concat과 같지만, 위처럼 컴파일러가 
아래 코드와 같이 StringBuilder 클래스로 변환하여 append로 문자열을 더해준 뒤 toString()으로 결과값을 변환하여 넘겨줄 때도 있다.

#String 클래스에서 문자열을 더할 경우(concat method, +연산자)

주소	값
1000	try
2000	tryHello
3000	tryHelloWorld
(문자열을 더할 때마다 주소를 새로 할당하여 생성)

#StringBuilder클래스에서 문자열을 더할 경우

주소	값
1000	try
1000	tryHello
1000	tryHelloWorld
(같은 주소에 문자열을 추가를 하는 방식)

#사용법
StringBuilder sb = new StringBuiler();
sb.append("a");
sb.append("b");
String str = sb.toString();

StringBuilder는 append()펑션이 있는데, 이는 문자열을 더하는 역할을 한다.
예제와 다르게 빈번하게, 긴 문자열들을 더해야 할 경우 더욱 효율적이다.




