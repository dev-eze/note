자바8이상부터는 Calendar, Date로 시간,날짜를 표현하는것을 지양한다.
Calendar, Date클래스등 JDK의 기본 날짜,시간 클래스의 문제점은 아래블로그에 잘 설명되어 있다.
https://d2.naver.com/helloworld/645609

1.불변객체가 아니다 
VO는 완전한 불변 객체일 뗴 별칭 문제, 스레드 불안정성 등 여러 객체에서 공유되어도 안전하다. 
C#, Pythonr같은 언어에서는 날짜클래스가 한번 생성된 이후에는 내부 속성을 바꿀 수 없다.
하지만 Java의 기본 날짜, 시간 클래스는 불변 객체가 아니다. 값을 바꿀 수 있는 set메서드가 클래스내 존재한다.
외부에서 변경가능 하기 떄문에 악의적인 클라이언트 코드에 공격을 받을 수 있다. 
이때문에 Calendar객체나 Date객체가 여러 객체에서 공유되면 한 곳에서 바꾼 값이 다른 곳에 영향을 미친다.
이를 회피하려면 방어복사 기법을 써서 새로운 객체를 생성해서 반환하는 구현이 바람직하다. 

예) date1(x), date2(o)

 public ClassName(Date date1, date2) {
  this.date1 = date1;
  this.date2 = new Date(date2.getTime());;
 }
 
 public getDate1() {
  return this.date1;
 }
 
 public getDate2() {
  return new Date(this.date2.getTime());
 }

2.int 상수 필드의 남용
Calendar를 사용한 날짜 연산은 int 상수 필드를 사용한다. 
몇초후를 계산하는 연산식이나, 월,요일 지정 등 많은 혼란을 야기시킨다.

예) 8초후 계산
calendar.add(Calendar.SECOND, 2); 
// 캘린더 클래스의 다른 상수가 들어가도 컴파일 시점에 확인할 방법이 없다.

예) 2018년 10월 4일 표현
calendar.set(2018, Calendar.OCTOBER, 4);
calendar.set(2018, 10, 4); //2018년 11월 4일 
// 월에 해당하는 october의 실제 값은 9이다. jdk 1.0에서 date클래스는 1월을 0으로 표현했고 jdk1.1부터 포함된
calendar클래스도 이러한 악습을 이어왔다. 
d2블로그를 보면 가독성을 높이기위해 calendar.set(2018, 10-1, 4);로 표현하는 분도 있다고 한다.

이러한 헷갈린 표기법으로 2018년 12월 31을 지정하려다 2019년으로 넘어가는 사례가 발생하기도 한다.
12월의 상수값은 11이지만, 12를 대입하면 2019년 1월 31로 넘어가게 된다.
Calendar.set()메서드는 오류를 반환하지 않기 떄문에 실수율이 높아진다. 
calendar.setLenient(false)메서드를 호출하면 잘못된 우러이 지정된 객체에서 IllegalArgumentException을 뱉는다.
그렇게 지정해도 set메서드가 호출되는 시점이 아닌 get메서드가 호출될 뗴 해당 Exception이 발생한다. 

예) 
Calendar calendar = new Calendar.getInstance();
calendar.setLenient(false);
calendar.set(2018, 12, 31);
calendar.get(Calendar.MONTH);


3.일관성이 없는 요일 상수
일요일이 어디서는 0, 어디서는 1 너무 헷갈려 ㅠㅠ 
4.Date와 Calendar 객체의 역할 분활.. 
Calendar객체를 생성하고 , Date객체를 생성하는 프로세스는 번거롭다.
6.java.util.Date 하위 클래스의 문제

위와 같은 이유로 자바에서 제공하는 API를 사용하는것을 지양하고 
오픈 소스 라이브러리인 jodaTime을 주로 사용하게 된다.

이러한 문제를 해결하기 위해 자바도 자바8부터는 LocalDate, LocalTime, LocalDateTile이라는 클래스를 지원한다.(jodaTime에 영향을 받아 비슷하게 설계되었다)

날짜/시간을 생성하고 입맛에 맞게 포맷하는 방법도 수월해졌다. 
