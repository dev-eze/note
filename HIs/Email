
/**
 * Mail Handler
 */
@Component
@Slf4j
public class MailHelper {

  @Value("#{file['default_send_email']}")
  private String default_send_email;

  /**
   * <pre>
   * getMessageMaping
   * 문자열 맵핑 후 html 반환
   * <pre>
   * @param paramMap
   * @param htmlText
   * @return
   */
  public String getMessageMaping(Map<String, String> paramMap, String htmlText) {
    if (paramMap == null) {
      return htmlText;
    }

    Iterator<String> iterator = paramMap.keySet().iterator();
    while (iterator.hasNext()) {
      String key = iterator.next();
      String value = paramMap.get(key);
      if (value == null)
        value = "";
      htmlText = htmlText.replace("#" + key + "#", value);
    }

    return htmlText;
  }

  /**
   * <pre>
   * getTemplateUrl
   * 템플릿 경로 가져오기
   * <pre>
   * @param templatePath
   * @return
   */
  public URL getTemplateUrl(MailTemplate templatePath) {
    return getTemplateUrl(templatePath.toString());
  }

  public URL getTemplateUrl(String templatePath) {
    URL url = MailHelper.class.getClassLoader().getResource(templatePath);
    return url;
  }

  /**
   * <pre>
   * readFile
   * 파일 read
   * <pre>
   * @param path
   * @return
   * @throws IOException
   */
  public String readFile(String path) throws IOException {
    BufferedReader reader = null;
    StringBuilder builder = new StringBuilder();
    try {
      reader = new BufferedReader(
              new InputStreamReader(
                      (new FileInputStream(new File(path))
                      ), "UTF-8"));
      String line = null;
      while ((line = reader.readLine()) != null) {
        builder.append(line);
      }

    } catch (IOException ex) {
      log.error("{}", ex);
      throw ex;
    } finally {
      if (reader != null) {
        try {
          reader.close();
        } catch (IOException ex) {
          log.error("{}", ex);
        }
      }
    }
    return builder.toString();
  }
}


    public void sendEmail(String mailTemplateUrl, MailInfo mailInfo) {
        if (mailInfo == null || StringUtils.isBlank(mailInfo.getEmail())) {
            throw new IllegalStateException("메일 발송 과정에 필수파람정보가 없습니다. mailInfo: " + mailInfo);
        }
        try {
            URL htmlUtl = mailHelper.getTemplateUrl(mailTemplateUrl);
            String mailTemplate = mailHelper.readFile(htmlUtl.getFile());

            HashMap<String,String> param = new HashMap<>();
            param.put("이름", mailInfo.getName());

            mailMessageService.reservationMail(
                    MailMessageServiceInfo.builder()
                    .title(mailHelper.getMappignTemplate(param, TEMPLATE_TITLE))
                    .body(mailHelper.getMappignTemplate(param, mailTemplate))
                    .toEmail(mailInfo.getEmail())
                    .fromEmail(defaultFromEmail)
                    .build());
        } catch (Exception e) {
            log.error("메일 발송 과정에 오류가 발생했습니다. error:{}-mailInfo:{}", e, mailInfo);
        }
    }
