html 폼 :
서버에 데이터를 전송할 목적으로 주로 사용한다. 
웹은 클라이어트(크롬,사파리,ie)는 서버(아파치,톰캣,Nginx)로 http프로토콜을 사용해 요청을 한다.
서버응답은 요청과 동일한 프로토콜을 사용한다.

<form> :
요소는 데이터 전송 방법을 정의한다. 
제공하는 모든 속성은 사용자가 submit버튼을 누를때 보낼 요청으로 구성되도록 설개되었다.
이 속성은 action, method이다.

action : 
이 속성은 데이터를 어디로 보낼 것인지 지정한다. 
이값은 반드시 유효한 url이어야 한다. 
이 속성을 지정하지 안으면 데이터는 폼이 있는 페이지의 url로 보내진다.

method :
이 속성은 데이터를 어떻게 보낼 것인지 방법을 정의한다.
Http 프로토콜은 다양한 요청방법을 제공한다.
html form 데이터는 오직 2가지 방법으로만 전송이 가능하다. get, post!

이 2가지 방식의 차이점을 이해하려면 http 작동밥법을 알아야 한다.
웹에서 리소스에 접근 할 때 마다, 브라우저는 urld에 요청을 보낸다.
브라우저 수용력에 대한 전역 메타 데이터들을 포함하는 헤더와 
서버에서 지정된 요청을 처리하는데 필요한 정보를 포함하는 바디가 있다. 

get :
브라우저에서 서버에 주어진 리소스를 전달해달라고 말하기 위해 사용되는 방식이다. 
서버 난 이 리소스를 원해! 라고 말하는 것이다.
이 경우 브라우저는 바디가 비어 있는 요청을 하게 된다. 
바디가 비어 있기 때문에 데이터는 url에 포함되어 서버로 보내진다.
그래서 서버에서 받을 떄 @RequestBody로 받을 수 없고
@RequestParam, @PathVariable, @ModelAttiribute등으로 받을 수 있다.

Post :
브라우저 http요청 바디안에 제공되는 데이터에 대한 응답을 요구하기 위해 서버로 보내는 방식이다.
서버야 보내는 이 데이터를 보고 이거에 맞는 응답과 데이터를 보내줘!
데이터는 http 요청 바디에 추가되어 전송되기 떄문에 서버에서 받을때
@RequestBody, ModelAttiribute등으로 받을 수 있다.
Content-Length 헤더는 바디의 크기를 나태내고,  Content-Type 헤더는 서버에 보낼 리소스의 종류 나태낸다.

위와 살펴봤듯이 (개발자툴이나 와이어샤크등을 사용하지 않는 이상) http요청은 통상 사용자에게 노출되지 않는다.
사용자에게 보여지는 것은 호출한 url뿐이다. 그래서 get요청은 url상에 데이터가 보여지지만, post요청은 그러지 않고 바디를 열어봐야한다.



